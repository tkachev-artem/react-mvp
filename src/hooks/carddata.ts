"use client";

import { useQuery } from "@tanstack/react-query";

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ localStorage (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
const isClient = typeof window !== 'undefined';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ localStorage
const getAuthToken = (): string | null => {
  if (!isClient) return null;
  return localStorage.getItem("auth_token");
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã (–≤–∑—è—Ç–æ –∏–∑ Swagger)
export interface CardData {
  id?: number;
  cardNumber?: string;
  expiryDate?: string;
  fullName?: string;
  status?: string;
  isActive?: boolean;
}

// –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ/–æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
export const defaultCardData: CardData = {
  id: 1,
  cardNumber: "1234 5678 9012 3425",
  expiryDate: "12/26",
  fullName: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
  status: "Active",
  isActive: true,
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 4 —Ü–∏—Ñ—Ä
export const formatCardNumber = (cardNumber: string): string => {
  const cleaned = cardNumber.replace(/\D/g, "");
  return cleaned.replace(/(\d{4})(?=\d)/g, "$1 ");
};

// üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
export const requestVirtualCard = async (): Promise<void> => {
  const token = getAuthToken();
  if (!token) throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

  const response = await fetch("/api/VCard/request", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      Accept: "application/json",
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    if (response.status === 401) throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
    if (response.status === 400) throw new Error(errorData.message || "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å");
    if (response.status === 409) throw new Error("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞");
    throw new Error(errorData.message || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
};

// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ PIN-–∫–æ–¥—É
export const confirmVirtualCard = async (pinCode: string): Promise<void> => {
  const token = getAuthToken();
  if (!token) throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

  const response = await fetch("/api/VCard/confirm", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      Accept: "*/*",
      "Content-Type": "application/json",
    },
    body: JSON.stringify(pinCode), // üëà –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞!
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    if (response.status === 401) throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
    if (response.status === 400) throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥");
    throw new Error(errorData.message || "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞—Ä—Ç—ã");
  }
};

// üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
const fetchCardInfo = async (): Promise<CardData> => {
  const token = getAuthToken();
  if (!token) throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

  const response = await fetch("/api/VCard/info", {
    method: "GET",
    headers: {
      Authorization: `Bearer ${token}`,
      Accept: "application/json",
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    if (response.status === 401) throw new Error("–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    if (response.status === 404) return {}; // –ù–µ—Ç –∫–∞—Ä—Ç—ã ‚Äî –Ω–µ –æ—à–∏–±–∫–∞
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã");
  }

  const data = await response.json();
  if (data.cardNumber) {
    data.cardNumber = formatCardNumber(data.cardNumber);
  }

  return data;
};

export const useCardData = () => {
    return useQuery({
      queryKey: ["cardInfo"],
      queryFn: fetchCardInfo,
      enabled: isClient && !!getAuthToken(),
      refetchInterval: 5 * 60 * 1000,
      refetchOnWindowFocus: true,
      retry: false,
    });
  };
  
